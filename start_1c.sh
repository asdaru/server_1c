#!/bin/bash
#------------------------------------------------------------
# 1C:Enterprise server configuration parameters
#------------------------------------------------------------

# 1C:Enterprise server keytab file.
# default - usr1cv82.keytab file in 1C:Enterprise server
#           installation directory
#
#SRV1CV8_KEYTAB=

# Number of the cluster port created by default during first
# launch of ragent
#
# default - 1540
#
#SRV1CV8_PORT=

# Number of cluster agent main port. This port is used by the
# cluster console to address the central server. Cluster agent
# port is also specified as the IP port of the working server.
#
# default - 1541
#
#SRV1CV8_REGPORT=

# Port range for connection pool
# example values:
#   45:49
#   45:67,70:72,77:90
#
# default - 1560:1691
#
#SRV1CV8_RANGE=

# 1C:Enterprise server configuration debug mode
# 0 - default - off
# 1 - on
#
#SRV1CV8_DEBUG=

# Path to directory with claster data
# default - $HOMEDIR/.1cv82/1C/1Cv82
#
SRV1CV8_DATA=/opt/1C/data/

# Security level:
# 0 - default - unprotected connections
# 1 - protected connections only for the time of user
#     authentication
# 2 - permanently protected connections
#
#SRV1CV8_SECLEV=

#------------------------------------------------------------
# end of config
#------------------------------------------------------------

#########################################
########### init starts here ############
#########################################

# chkconfig: 35 74 36
# description: Starts and stops the 1C:Enterprise daemons

#------------------------------------------------------------
# global macros. generated by install script
#------------------------------------------------------------
G_CONF_STYLE=deb
G_VER_ARCH=x86_64
G_VER_MAJOR=8
G_VER_MINOR=2
G_VER_BUILD=19
G_VER_RELEASE=83
G_BINDIR="/opt/1C/v${G_VER_MAJOR}.${G_VER_MINOR}/${G_VER_ARCH}"
#------------------------------------------------------------

G_VER_SHORT=${G_VER_MAJOR}.${G_VER_MINOR}
G_TITLE="1C:Enterprise ${G_VER_SHORT} server"

#------------------------------------------------------------
# this values can be passed from outside, so perform "z-check"
#------------------------------------------------------------
[ -z "$SRV1CV8_USER"      ] && SRV1CV8_USER=usr1cv${G_VER_MAJOR}${G_VER_MINOR}
[ -z "$SRV1CV8_BINDIR"    ] && SRV1CV8_BINDIR="$G_BINDIR"
[ -z "$SRV1CV8_PIDFILE"   ] && SRV1CV8_PIDFILE="/var/run/srv1cv${G_VER_MAJOR}${G_VER_MINOR}.pid"
[ -z "$SRV1CV8_KEYTAB"    ] && SRV1CV8_KEYTAB="$SRV1CV8_BINDIR/$SRV1CV8_USER.keytab"
[ -z "$SRV1CV8_WAITSTART" ] && SRV1CV8_WAITSTART=5
[ -z "$SRV1CV8_WAITSTOP"  ] && SRV1CV8_WAITSTOP=5

#------------------------------------------------------------
# builds ragent's command line from configuration parameters
#------------------------------------------------------------
function buildCommandLine() {
    local cmdline="$SRV1CV8_BINDIR/ragent"
    [ ! -z "$SRV1CV8_PORT" ] && cmdline="$cmdline -port $SRV1CV8_PORT"
    [ ! -z "$SRV1CV8_REGPORT" ] && cmdline="$cmdline -regport $SRV1CV8_REGPORT"
    [ ! -z "$SRV1CV8_DATA" ] && cmdline="$cmdline -d \"$SRV1CV8_DATA\""
    [ ! -z "$SRV1CV8_RANGE" ] && cmdline="$cmdline -range $SRV1CV8_RANGE"
    [ ! -z "$SRV1CV8_SECLEV" ] && cmdline="$cmdline -seclev $SRV1CV8_SECLEV"
    [ "x$SRV1CV8_DEBUG" == "x1" ] && cmdline="$cmdline -debug"
    echo $cmdline
}
#------------------------------------------------------------
# checks if process with passed pid exists
#------------------------------------------------------------
function checkpid() {
    ps -p $* > /dev/null
}


#------------------------------------------------------------
# call it when something fails
#------------------------------------------------------------
function failure() {
    [ "$BOOTUP" != "verbose" -a -z "$LSB" ] && echo FAILED
    return 0
}


#------------------------------------------------------------
# tries to get pid of ragent process, started by this script
#------------------------------------------------------------
function getRagentPid() {
    local user=$1
    shift

    # remove quotes in passed CMDLINE because
    # command line of process doesn't contains'em
    # even if they were passed.
    local cmdline=`echo $* | sed -e "s/\"//g"`

    ps -C ragent -opid=,user=,cmd= | while read curline; do
        local  curPID=`echo $curline | sed -e "s/ .*//"`
        local curline=`echo $curline | sed -e "s/$curPID //"`
        local  curUSR=`echo $curline | sed -e "s/ .*//"`
        local  curCMD=`echo $curline | sed -e "s/$curUSR //"`
        if [ "$curCMD" == "$cmdline" ] && [ "$curUSR" == "$user" ]; then
            echo $curPID
        fi
    done
}


#------------------------------------------------------------
# check if our ragent running
#------------------------------------------------------------
function isRagentRunning() {
    local mypid=`getRagentPid $*`
    [ ! -z "$mypid" ] && checkpid "$mypid"
}
#------------------------------------------------------------
# talks to stderr, and then logs failure to stdout
#------------------------------------------------------------
function logError() {
    echo -n "  Error: " >&2
    echo $* >&2
    failure
}
#------------------------------------------------------------
# put some additional non-critical debug info to stderr
#------------------------------------------------------------
function logWarning() {
    echo -n "Warning: " >&2
    echo $* >&2
}

function main() {
	if [ ! -z "$SRV1CV8_DATA" ]; then
		if [ -e "$SRV1CV8_DATA" ]; then
			[ ! -d "$SRV1CV8_DATA" ] && { logError "SRV1CV8_DATA \"$SRV1CV8_DATA\" is a file, not a directory!"; return 0; }
		fi
	fi

	[ ! -f "$SRV1CV8_BINDIR/ragent" ] && { logError "ragent file does not exists!" ; return 0; }
	[ ! -x "$SRV1CV8_BINDIR/ragent" ] && { logError "ragent file is not executable!"; return 0; }

	local cmd2run=`buildCommandLine`

	chown usr1cv82:grp1cv82 /opt/1C/v8.2/x86_64/usr1cv82.keytab && chmod 600 /opt/1C/v8.2/x86_64/usr1cv82.keytab

	sed -i -e "s/^.*NH_SERVER_ADDR.*$/NH_SERVER_ADDR = $NH_SERVER_ADDR/" /opt/1C/v8.2/x86_64/conf/nethasp.ini 

	if isRagentRunning "$SRV1CV8_USER" "$cmd2run"; then
		logWarning "already started!";
	else
		# run our process
		if [ -z "$SRV1CV8_USER" ]; then
			export KRB5_KTNAME="$SRV1CV8_KEYTAB"
			$cmd2run
		else
			chown -R $SRV1CV8_USER $SRV1CV8_DATA
			su -s /bin/bash  - "$SRV1CV8_USER" -c "KRB5_KTNAME=\"$SRV1CV8_KEYTAB\" $cmd2run"
		fi
	fi

	local mypid=`getRagentPid $SRV1CV8_USER $cmd2run`
	echo ${mypid} > "$SRV1CV8_PIDFILE"
}

main $*





